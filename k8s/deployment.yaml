apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web-app
  name: web-app
  namespace: _{_NAMESPACE_}_
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - image: _{_IMAGE_}_
        name: web-app
        ports:
        - containerPort: 5000
        env:
        - name: DB_NAME
          value: "webapp"
        - name: DB_USER
          value: "webapp"  # Hard-coded user
        - name: DB_PASSWORD
          value: "1234"  # Hard-coded password
        - name: DB_HOST
          value: "postgres-db"  # Replace with your PostgreSQL host, if needed
        - name: DB_PORT
          value: "5432"

---
apiVersion: v1
kind: Service
metadata:
  name: web-app
  namespace: _{_NAMESPACE_}_
spec:
  type: NodePort  # Change to NodePort
  selector:
    app: web-app
  ports:
    - port: 80         # The port that will be exposed
      targetPort: 5000 # The port on the container
      nodePort: 30000   # Specify the NodePort if you want a specific port; otherwise, one will be assigned automatically

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-db
  namespace: _{_NAMESPACE_}_
spec:
  serviceName: "postgres-db"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      initContainers:
      - name: db-init
        image: postgres:14  # PostgreSQL image
        env:
        - name: POSTGRES_USER
          value: "postgres"  # Using default 'postgres' superuser
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: DB_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_PASSWORD
        command:
          - sh
          - -c
          - |
            until pg_isready -h postgres-db -p 5432; do
              echo waiting for postgres;
              sleep 2;
            done;
            psql -h postgres-db -U postgres -c "CREATE USER webapp WITH PASSWORD '$DB_USER_PASSWORD';";
            psql -h postgres-db -U postgres -c "CREATE DATABASE webapp;";
            psql -h postgres-db -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE webapp TO webapp;";
            psql -h postgres-db -U postgres -d webapp -c "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), password VARCHAR(100));"
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"  # Using default 'postgres' superuser
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi  # Adjust storage size as needed
      volumeMode: Filesystem
      storageClassName: ""
      selector: {}

---
# Headless Service for PostgreSQL StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgres-db
  namespace: _{_NAMESPACE_}_
spec:
  clusterIP: None  # Headless service for StatefulSet
  selector:
    app: postgres-db
  ports:
    - port: 5432
      targetPort: 5432

---
# Secret for DB credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: _{_NAMESPACE_}_
type: Opaque
data:
  POSTGRES_PASSWORD: MTIzNA==  # Base64 encoded '1234'
  DB_PASSWORD: MTIzNA==         # Base64 encoded '1234' for webapp user password

---
# PersistentVolume for local storage (hostPath)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-local-pv
  namespace: _{_NAMESPACE_}_
spec:
  capacity:
    storage: 10Gi  # Adjust storage as needed
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: "manual"
  hostPath:
    path: "/mnt/data/postgres"  # Replace with your local path
