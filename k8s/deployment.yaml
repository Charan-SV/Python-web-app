# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-db
  namespace: _{_NAMESPACE_}_
spec:
  serviceName: postgresql-db-service
  selector:
    matchLabels:
      app: postgresql-db
  replicas: 1
  template:
    metadata:
      labels:
        app: postgresql-db
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: postgresql-db
        image: postgres:latest
        ports:
        - containerPort: 5432
          name: post-ser
        volumeMounts:
        - name: postgresql-db-disk
          mountPath: /data
        env:
        - name: POSTGRES_USER
          value: "postgres"  # Hard-coded user set to 'postgres'
        - name: POSTGRES_PASSWORD
          value: "Test@123"  # Hard-coded password
        - name: PGDATA
          value: /data/pgdata
  volumeClaimTemplates:
  - metadata:
      name: postgresql-db-disk
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-storage
      resources:
        requests:
          storage: 1Gi

---

# Web Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web-app
  name: web-app
  namespace: _{_NAMESPACE_}_
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - image: _{_IMAGE_}_  # Replace with your web app image
        name: web-app
        ports:
        - containerPort: 5000
        env:
        - name: DB_NAME
          value: "webapp"
        - name: DB_USER
          value: "postgres"  # Hard-coded user set to 'postgres'
        - name: DB_PASSWORD
          value: "Test@123"  # Hard-coded password
        - name: DB_HOST
          value: "postgresql-db-service"  # Use the service name of your PostgreSQL
        - name: DB_PORT
          value: "5432"

---

# Web Application Service
apiVersion: v1
kind: Service
metadata:
  name: web-app
  namespace: _{_NAMESPACE_}_
spec:
  type: NodePort
  selector:
    app: web-app
  ports:
    - port: 80         # The port that will be exposed
      targetPort: 5000 # The port on the container
      nodePort: 30000   # Specify the NodePort if you want a specific port; otherwise, one will be assigned automatically

---

# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql-db-service
  namespace: _{_NAMESPACE_}_
spec:
  selector:
    app: postgresql-db
  ports:
  - name: post-ser
    protocol: TCP
    port: 5432
    targetPort: 5432
  clusterIP: None  # Headless service for StatefulSet

---

# Storage Class for Local Storage
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner # indicates that this StorageClass does not support automatic provisioning
volumeBindingMode: WaitForFirstConsumer

---

# PersistentVolumeClaim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-db-disk
  namespace: _{_NAMESPACE_}_
spec:
  storageClassName: local-storage
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-db-disk
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 2Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/mnt//postgres/data"


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  name: web-app
  namespace: webapp  # Replace with your actual namespace
spec:
  rules:
  - host: web-app-webapp.192.168.49.2.nip.io  # Replace with your actual values
    http:
      paths:
      - backend:
          service:
            name: web-app
            port:
              number: 30000  # Ensure this matches your service definition
        path: /
        pathType: Prefix
