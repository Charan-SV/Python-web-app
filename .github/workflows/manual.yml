name: web-app

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Check Kubernetes Nodes
    - name: Check Kubernetes Nodes
      run: |
        kubectl get nodes

    # Step 3: Docker Login
    - name: Docker Login
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username="${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    # Step 4: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/web-app:${{ github.sha }}" .
        docker push "${{ secrets.DOCKERHUB_USERNAME }}/web-app:${{ github.sha }}"

    # Step 5: Create or Update Kubernetes Deployment
    - name: Create or Update Kubernetes Deployment
      run: |
        # Replace placeholders in deployment.yaml
        sed -i "s|_{_NAMESPACE_}_|${{ secrets.NAMESPACE }}|g" k8s/deployment.yaml
        sed -i "s|_{_IMAGE_}_|${{ secrets.DOCKERHUB_USERNAME }}/web-app:${{ github.sha }}|g" k8s/deployment.yaml
        
        # Create or update the deployment
        if kubectl get deployment web-app --namespace="${{ secrets.NAMESPACE }}"; then
          echo "Updating existing deployment..."
          kubectl apply -f k8s/deployment.yaml
        else
          echo "Creating new deployment..."
          kubectl apply -f k8s/deployment.yaml
        fi

    # Step 6: Docker Logout
    - name: Docker Logout
      run: |
        docker logout || true

    # Step 7: Postgres Login and List Tables
    - name: Postgres Login and List Tables
      run: |
        PGPASSWORD="${{ secrets.POSTGRES_PASSWORD }}" psql --host="${{ secrets.POSTGRES_HOST }}" --port="${{ secrets.POSTGRES_PORT }}" --username="${{ secrets.POSTGRES_USER }}" --dbname="${{ secrets.POSTGRES_DB }}" <<EOF
        \dt
        \q
        EOF

    # Step 8: Port Forwarding (optional for accessing the service)
    - name: Port Forwarding
      run: |
        # Start port-forwarding in the background
        kubectl port-forward svc/web-app 30000:80 --namespace="${{ secrets.NAMESPACE }}" &

        # Optional: Wait for a few seconds to ensure port forwarding is established
        echo "Waiting for port forwarding to establish..."
        sleep 5
        echo "Port forwarding established. Access the web app at http://localhost:30000"
